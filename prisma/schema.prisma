// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(uuid())
  name  String
  email String  @unique
  image String?
  bio   String?

  // Relations
  memberships Membership[]
  clips       Clip[]
  lyrics      LyricIdea[]
  comments    Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Band {
  id          String  @id @default(uuid())
  name        String
  description String?
  image       String?

  // Relations
  memberships Membership[]
  clips       Clip[]
  lyrics      LyricIdea[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Membership {
  id   String @id @default(uuid())
  role String // e.g. "owner", "member"

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  band   Band   @relation(fields: [bandId], references: [id])
  bandId String

  joinedAt DateTime @default(now())

  @@unique([userId, bandId]) // prevent duplicates
}

model Clip {
  id        String   @id @default(uuid())
  title     String
  fileUrl   String
  duration  Int? // in seconds
  createdAt DateTime @default(now())

  // Relations
  band   Band   @relation(fields: [bandId], references: [id])
  bandId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  comments Comment[]
}

model LyricIdea {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())

  // Relations
  band   Band   @relation(fields: [bandId], references: [id])
  bandId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  comments Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  clip   Clip?   @relation(fields: [clipId], references: [id])
  clipId String?

  lyric   LyricIdea? @relation(fields: [lyricId], references: [id])
  lyricId String?
}
